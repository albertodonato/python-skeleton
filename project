#!/usr/bin/env python3
#
# Author: Alberto Donato <alberto.donato@gmail.com>
#
#
# This file is part of python-skeleton.
#
# python-skeleton is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# python-skeleton is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License
# along with python-skeleton.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import yaml
from glob import iglob
from fnmatch import fnmatch
from string import Template
from argparse import ArgumentParser


class DottedIDsTemplate(Template):
    '''A string Template which allows dotted and dashed identifiers.'''

    idpattern = '[a-z][_.a-z0-9-]*'


def main():
    source_dir = os.path.dirname(__file__)
    args = get_parser(source_dir).parse_args()

    config = get_config(args.config)
    mapping = get_mapping(config)

    # Call the appropriate action handler.
    action = globals().get('action_{}'.format(args.action))
    action(source_dir, mapping, args)


def action_bootstrap(source_dir, mapping, args):
    '''Action handler to bootstrap project.'''
    log('Processing repository structure...')

    target_dir = args.target

    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    for src, dst in get_template_files(source_dir):
        src = os.path.join(source_dir, src)
        dst = get_target_name(dst, mapping['project.name'])
        dst = os.path.join(target_dir, dst)
        log(' {} -> {}'.format(src, dst))

        if os.path.isdir(src) and not os.path.isdir(dst):
            os.makedirs(dst)
        elif os.path.isfile(src):
            replace_template(src, dst, mapping)


def action_license(source_dir, mapping, args):
    '''Action handler to add/update license headers.'''
    log('Processing license headers...')
    header = get_header(args.template, mapping['project.title'])

    files = (os.path.join(*paths) for paths in match_files(
        [args.target], args.patterns))
    for path in files:
        with open(path) as in_fd:
            log(' {}'.format(path))

            content = in_fd.read()
            new_content = update_content_header(content, header)
            with open(path, 'w') as out_fd:
                out_fd.write(new_content)


def get_parser(source_dir):
    '''Return the command line parser.'''
    parser = ArgumentParser(
        description='Build tree structure for a Python project')
    parser.add_argument(
        '-C', '--config', help='config file (default %(default)s)',
        default='project.yaml')
    subparsers = parser.add_subparsers(
        metavar='ACTION', dest='action', help='action to perform')
    subparsers.required = True  # Workaround for python bug
    # Bootstrap
    bootstrap_parser = subparsers.add_parser(
        'bootstrap', help='bootstrap a project')
    bootstrap_parser.add_argument('target', help='target project directory')

    # Add/update license headers
    license_parser = subparsers.add_parser(
        'license', help='add or update license headers')
    license_parser.add_argument('target', help='target project directory')
    license_parser.add_argument(
        'patterns', nargs='+', help='Patterns for files to match in base path')
    license_parser.add_argument(
        '-T', '--template', help='license template file (default %(default)s)',
        default=os.path.join(source_dir, 'license-template.txt'))
    return parser


def get_config(config_file):
    '''Return the project configuration.'''
    log('Loading configuration from "{}"'.format(config_file))
    with open(config_file) as fd:
        return yaml.load(fd)


def get_mapping(config):
    '''Return the template variables mapping from the config.'''
    return dict(flatten_dict(config))


def get_template_files(source_dir):
    '''Return a list of (source, destination) template file names tuples.'''
    source_dir = os.path.realpath(source_dir)
    source_tree_dir = os.path.join(source_dir, 'tree')

    names = []
    with open(os.path.join(source_dir, 'project.list')) as fd:
        for line in fd:
            line = line.strip()
            if line.startswith("#"):
                continue

            path = os.path.normpath(os.path.join(source_tree_dir, line))
            # Strip the source dir from paths
            names.extend(
                (name,
                 name.replace(source_tree_dir + os.path.sep, '', 1))
                for name in iglob(path))

    return names


def replace_template(src_name, dst_name, mapping):
    '''Copy a file replacing template variables.'''
    dst_dir = os.path.dirname(dst_name)
    if not os.path.isdir(dst_dir):
        os.makedirs(dst_dir)

    with open(src_name) as src_fd, open(dst_name, 'w') as dst_fd:
        template = DottedIDsTemplate(src_fd.read())
        dst_fd.write(template.substitute(mapping))


def get_target_name(name, project_name):
    '''Return the name of the target file/directory from the source one.'''
    target_name = name.replace('dot-', '.')
    target_name = target_name.replace('skeleton', project_name)
    return target_name


def get_header(template_file, project_name):
    '''Return content of the license text.'''
    with open(template_file) as fd:
        template = fd.read()
    return template.format(project_name=project_name)


def update_content_header(text, header):
    '''Update the content of a file with the new header.'''
    if not text:
        return header

    header_lines = header.splitlines()
    header_lines.append('')  # add an empty line
    lines = text.splitlines()
    for idx, line in enumerate(lines):
        if line.startswith('#') or line == '':
            continue
        break
    return '\n'.join(header_lines + lines[idx:]) + '\n'


def match_files(dirpaths, patterns):
    '''Search files by name based on shell patterns.'''
    for dirpath in dirpaths:
        for dirname, x, filenames in os.walk(dirpath):
            for filename in filenames:
                if any(fnmatch(filename, pattern) for pattern in patterns):
                    yield dirname, filename


def log(message):
    '''Print a log message to stderr.'''
    sys.stderr.write('{}\n'.format(message))


def flatten_dict(data, prefix=''):
    '''Flatten a nested dict to an iterator yielding (key, value) tuples.'''
    if isinstance(data, dict):
        base_prefix = prefix
        for key, value in data.items():
            if base_prefix:
                prefix = '.'.join((base_prefix, key))
            else:
                prefix = key
            for item in flatten_dict(value, prefix=prefix):
                yield item
    else:
        yield prefix, data


if __name__ == '__main__':
    main()
