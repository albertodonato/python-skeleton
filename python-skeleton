#!/usr/bin/env python3

from argparse import (
    ArgumentDefaultsHelpFormatter,
    ArgumentParser,
    FileType,
    Namespace,
)
from collections.abc import Iterator
from io import TextIOWrapper
import logging
from pathlib import Path
from string import Template
import subprocess
import sys
import tomllib
from typing import Any

import yaml


class DottedIDsTemplate(Template):
    """A string Template which allows dotted and dashed identifiers."""

    idpattern = "[a-z][_.a-z0-9-]*"


def main() -> int:
    source_dir = Path(__file__).parent
    args = get_args(source_dir)

    logging.basicConfig(
        level=logging.DEBUG if args.debug else logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    logger = logging.getLogger("python-skeleton")

    logger.info(f"Loading configuration from '{args.config.name}'")
    config = get_config(args.config)
    context = get_context(config)
    if args.debug:
        logger.debug(f"Template context: {context}")
    logger.info("Processing repository structure...")
    target_dir = Path(args.target)
    bootstrap(source_dir, target_dir, context, logger)

    if not args.skip_git_init and not (target_dir / ".git").exists():
        logger.info(f"Initializing git repository in {target_dir}")
        init_git_repo(target_dir)

    return 0


def get_args(source_dir: Path) -> Namespace:
    """Return the parsed command-line arguments."""
    parser = ArgumentParser(
        description="Build tree structure for a Python project",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--debug",
        help="enable debug messages",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--skip-git-init",
        help="skip initializing git repository",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "config",
        help=(
            "configuration file. Thise can either be a YAML file "
            "for a new project, or the pyproject.toml file for an existing one"
        ),
        type=FileType("rb"),
    )
    parser.add_argument("target", help="target project directory")
    return parser.parse_args()


def get_config(config_file: TextIOWrapper) -> dict[str, Any]:
    """Get the template context from the configuration file."""
    if config_file.name.endswith(".toml"):
        data = tomllib.load(config_file)  # type: ignore[arg-type]
        project = data["project"]
        config = {
            "project": {
                "name": project["name"],
                "title": project["description"],
                "url": get_pyproject_option(project, "urls", "homepage"),
                "python-version": project["requires-python"].lstrip(">="),
            },
            "author": project["authors"][0],
        }

        package_data = get_pyproject_option(
            data, "tool", "setuptools", "package-data"
        )
        if package_data:
            # use the first key found in the list
            config["project"]["package"] = next(iter(package_data))
    else:
        config = yaml.safe_load(config_file)
    config_file.close()
    return config


def get_pyproject_option(data: dict[str, Any], *keys: str) -> Any:
    """Return a value from pyproject.toml content, if found."""
    for key in keys:
        if key not in data:
            return None
        data = data[key]
    return data


def get_context(config: dict[str, Any]) -> dict[str, Any]:
    """Return the template variables context from the config file."""
    config["project"].setdefault(
        "package", config["project"]["name"].replace("-", "_")
    )
    return dict(flatten_dict(config))


def bootstrap(
    source_dir: Path,
    target_dir: Path,
    context: dict[str, Any],
    logger: logging.Logger,
) -> None:
    """Bootstrap project."""
    target_dir.mkdir(parents=True, exist_ok=True)

    for src, dst in get_template_files(
        source_dir, target_dir, context["project.package"]
    ):
        logger.info(f" {src} -> {dst}")
        render_template(src, dst, context)


def init_git_repo(target_dir: Path) -> None:
    process = subprocess.run(
        ["git", "-C", str(target_dir), "init"],
        capture_output=True,
    )
    process.check_returncode()


def get_template_files(
    source_dir: Path, target_dir: Path, package_name: str
) -> Iterator[tuple[Path, Path]]:
    """Yield tuples of (source, destination) template file names."""
    source_tree_dir = source_dir / "tree"

    for path in iter_files(source_tree_dir):
        yield (
            path,
            target_dir
            / get_target_name(
                str(path.relative_to(source_tree_dir)), package_name
            ),
        )


def iter_files(base_path: Path) -> Iterator[Path]:
    """Return Paths for files under a base path."""
    for path in base_path.iterdir():
        if path.is_file():
            yield path
        elif path.is_dir():
            yield from iter_files(path)


def render_template(src: Path, dst: Path, context: dict[str, Any]) -> None:
    """Render a template file to its destination."""
    dst.parent.mkdir(parents=True, exist_ok=True)

    with src.open() as src_fd, dst.open("w") as dst_fd:
        template = DottedIDsTemplate(src_fd.read())
        dst_fd.write(template.substitute(context))


def get_target_name(name: str, project_base: str) -> str:
    """Return the name of the target file/directory from the source one."""
    target_name = name.replace("dot-", ".")
    target_name = target_name.replace("skeleton", project_base)
    return target_name


def flatten_dict(
    data: dict[str, Any], prefix: str = ""
) -> Iterator[tuple[str, Any]]:
    """Flatten a nested dict to an iterator yielding (key, value) tuples."""
    if isinstance(data, dict):
        base_prefix = prefix
        for key, value in data.items():
            if base_prefix:
                prefix = ".".join((base_prefix, key))
            else:
                prefix = key
            yield from flatten_dict(value, prefix=prefix)
    else:
        yield prefix, data


if __name__ == "__main__":
    sys.exit(main())
