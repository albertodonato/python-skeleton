#!/usr/bin/env python3

import os
import sys
import yaml
from glob import iglob
from string import Template
from argparse import ArgumentParser


class DottedIDsTemplate(Template):
    """A string Template which allows dotted and dashed identifiers."""

    idpattern = '[a-z][_.a-z0-9-]*'


def main():
    source_dir = os.path.dirname(__file__)
    args = get_parser(source_dir).parse_args()

    config = get_config(args.config)
    mapping = get_mapping(config)

    # Call the appropriate action handler.
    action = globals().get(f'action_{args.action}')
    action(source_dir, mapping, args)


def action_bootstrap(source_dir, mapping, args):
    """Action handler to bootstrap project."""
    log('Processing repository structure...')

    target_dir = args.target

    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    for src, dst in get_template_files(source_dir):
        src = os.path.join(source_dir, src)
        dst = get_target_name(dst, mapping['project.base'])
        dst = os.path.join(target_dir, dst)
        log(f' {src} -> {dst}')

        if os.path.isdir(src) and not os.path.isdir(dst):
            os.makedirs(dst)
        elif os.path.isfile(src):
            replace_template(src, dst, mapping)


def get_parser(source_dir):
    """Return the command line parser."""
    parser = ArgumentParser(
        description='Build tree structure for a Python project')
    parser.add_argument(
        '-C', '--config', help='config file (default %(default)s)',
        default='project.yaml')
    subparsers = parser.add_subparsers(
        metavar='ACTION', dest='action', help='action to perform')
    subparsers.required = True  # Workaround for python bug
    # Bootstrap
    bootstrap_parser = subparsers.add_parser(
        'bootstrap', help='bootstrap a project')
    bootstrap_parser.add_argument('target', help='target project directory')
    return parser


def get_config(config_file):
    """Return the project configuration."""
    log(f'Loading configuration from "{config_file}"')
    with open(config_file) as fd:
        return yaml.safe_load(fd)


def get_mapping(config):
    """Return the template variables mapping from the config."""
    config['project']['base'] = config['project']['name'].replace('-', '_')
    return dict(flatten_dict(config))


def get_template_files(source_dir):
    """Return a list of (source, destination) template file names tuples."""
    source_dir = os.path.realpath(source_dir)
    source_tree_dir = os.path.join(source_dir, 'tree')

    names = []
    with open(os.path.join(source_dir, 'project.list')) as fd:
        for line in fd:
            line = line.strip()
            if line.startswith("#"):
                continue

            path = os.path.normpath(os.path.join(source_tree_dir, line))
            # Strip the source dir from paths
            names.extend(
                (name,
                 name.replace(source_tree_dir + os.path.sep, '', 1))
                for name in iglob(path))

    return names


def replace_template(src_name, dst_name, mapping):
    """Copy a file replacing template variables."""
    dst_dir = os.path.dirname(dst_name)
    if not os.path.isdir(dst_dir):
        os.makedirs(dst_dir)

    with open(src_name) as src_fd, open(dst_name, 'w') as dst_fd:
        template = DottedIDsTemplate(src_fd.read())
        dst_fd.write(template.substitute(mapping))


def get_target_name(name, project_base):
    """Return the name of the target file/directory from the source one."""
    target_name = name.replace('dot-', '.')
    target_name = target_name.replace('skeleton', project_base)
    return target_name


def log(message):
    """Print a log message to stderr."""
    sys.stderr.write(f'{message}\n')


def flatten_dict(data, prefix=''):
    """Flatten a nested dict to an iterator yielding (key, value) tuples."""
    if isinstance(data, dict):
        base_prefix = prefix
        for key, value in data.items():
            if base_prefix:
                prefix = '.'.join((base_prefix, key))
            else:
                prefix = key
            yield from flatten_dict(value, prefix=prefix)
    else:
        yield prefix, data


if __name__ == '__main__':
    main()
